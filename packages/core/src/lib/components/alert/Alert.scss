@use '../escape.scss' as *;
@use '../themes.scss' as *;
@use 'sass:list';
@use 'sass:map';

.dui-alert {
	@include box-border-radius();

	display: flex;
	width: 100%;
	flex-direction: column;
	align-items: center;
	justify-content: space-between;
	gap: 1rem;
	padding: 1rem;

	@media (min-width: get-default-screen-size('md')) {
		flex-direction: row;
	}

	& > * {
		display: flex;
		align-items: center;
		gap: 0.5rem;
	}

	& > .dui-alert-icon {
		flex: none;
	}

	& > .dui-alert-actions {
		flex: none;
	}
}

$colors: base, primary, secondary, accent, info, success, warning, error;

@mixin color($color) {
	@if not list.index($colors, $color) {
		@error 'Invalid color `#{$color}`. Expected one of `#{$colors}`.';
	}

	.dui-alert.dui-alert-#{$color} {
		@include bg-color($color + if($color == 'base', '-200', ''));
		@include text-color($color + '-content');
	}
}

@mixin colors() {
	@each $color in $colors {
		.dui-alert.dui-alert-#{$color} {
			@include bg-color($color + if($color == 'base', '-200', ''));
			@include text-color($color + '-content');
		}
	}
}

@mixin responsive-color($color, $prefix, $screen-size) {
	@if not list.index($colors, $color) {
		@error 'Invalid color `#{$color}`. Expected one of `#{$colors}`.';
	}

	$prefix: escape($prefix + ':');

	@media (min-width: $screen-size) {
		.dui-alert.#{$prefix}dui-alert-#{$color} {
			@include bg-color($color + if($color == 'base', '-200', ''));
			@include text-color($color + '-content');
		}
	}
}
