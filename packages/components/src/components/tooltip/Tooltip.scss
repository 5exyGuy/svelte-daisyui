@use 'sass:list';
@use '../variables.scss' as *;
@use '../escape.scss' as *;

.tooltip {
    @apply relative inline-block text-center;
    --tooltip-offset: calc(100% + 1px + var(--tooltip-tail, 0px));
    --tooltip-tail: 3px;
    --tooltip-color: hsl(var(--neutral));
    --tooltip-text-color: hsl(var(--neutral-content));
    --tooltip-tail-offset: calc(100% + 1px - var(--tooltip-tail));

    & > :global(.tooltip-content),
    &:after {
        @apply opacity-0 transition delay-100 duration-200 ease-in-out;
    }

    & > :global(.tooltip-content) {
        @apply absolute pointer-events-none;
        @apply -translate-x-1/2 top-auto left-1/2 right-auto;
        bottom: var(--tooltip-offset);
    }

    &:after {
        @apply absolute block w-0 h-0 border-solid;
        @apply -translate-x-1/2 top-auto left-1/2 right-auto;
        content: '';
        border-width: var(--tooltip-tail, 0);
        bottom: var(--tooltip-tail-offset);
        border-color: var(--tooltip-color) transparent transparent
            transparent;
    }

    & > :global(.tooltip-content) {
        @apply max-w-xs rounded px-2 py-1 text-sm;
        background-color: var(--tooltip-color);
        color: var(--tooltip-text-color);
        width: max-content;
    }

    &.tooltip-open > :global(.tooltip-content),
    &.tooltip-open:after,
    &:hover > :global(.tooltip-content),
    &:hover:after {
        @apply opacity-100 delay-75;
    }

    @mixin tooltip-props($prefix: '') {
        $prefix: escape($prefix);
    
        @each $color in list.join($brand-colors, $functional-colors) {
            &.tooltip-#{$color} {
                --tooltip-color: hsl(var(--#{$color}));
                --tooltip-text-color: hsl(var(--#{$color}-content));
            }
        }
    
        &.tooltip-top {
            & > :global(.tooltip-content) {
                @apply -translate-x-1/2 top-auto left-1/2 right-auto;
                bottom: var(--tooltip-offset);
            }
    
            &:after {
                @apply -translate-x-1/2 top-auto left-1/2 right-auto;
                bottom: var(--tooltip-tail-offset);
                border-color: var(--tooltip-color) transparent transparent
                    transparent;
            }
        }
    
        &.tooltip-bottom {
            & > :global(.tooltip-content) {
                @apply -translate-x-1/2 left-1/2 right-auto bottom-auto;
                top: var(--tooltip-offset);
            }
    
            &:after {
                @apply -translate-x-1/2 left-1/2 right-auto bottom-auto;
                top: var(--tooltip-tail-offset);
                border-color: transparent transparent var(--tooltip-color)
                    transparent;
            }
        }
    
        &.tooltip-left {
            & > :global(.tooltip-content) {
                @apply -translate-y-1/2 top-1/2 left-auto bottom-auto;
                right: var(--tooltip-offset);
            }
    
            &:after {
                @apply -translate-y-1/2 top-1/2 left-auto bottom-auto;
                right: var(--tooltip-tail-offset);
                border-color: transparent transparent transparent
                    var(--tooltip-color);
            }
        }
    
        &.tooltip-right {
            & > :global(.tooltip-content) {
                @apply -translate-y-1/2 top-1/2 right-auto bottom-auto;
                left: var(--tooltip-offset);
            }
    
            &:after {
                @apply -translate-y-1/2 top-1/2 right-auto bottom-auto;
                left: var(--tooltip-tail-offset);
                border-color: transparent var(--tooltip-color) transparent
                    transparent;
            }
        }
    }
    
    @include tooltip-props();
    
    @each $screen-size in $tailwind-screen-sizes {
        @screen #{$screen-size} {
            @include tooltip-props('#{$screen-size}:');
        }
    }
}
