@use '../escape' as *;
@use '../variables';
@use '../colors';
@use 'sass:list';

.dui-toggle {
    flex-shrink: 0;
    height: 1.5rem;
    width: 3rem;
    cursor: pointer;
    appearance: none;
    border: 1px solid colors.get('neutral', 0.2);
    background-color: colors.get('neutral', 0.2);
    border-radius: var(--badge-border-radius);
    box-shadow: calc(var(--handle-offset) * -1) 0 0 2px colors.get('base-100') inset,
        0 0 0 2px colors.get('base-100') inset;
    transition: background-color, box-shadow var(--animation-input, 0.2s) ease-in-out;
    --handle-offset: 1.5rem;

    &:focus-visible {
        outline: 2px solid colors.get('neutral');
        outline-offset: 2px;
    }

    &:checked {
        border: 1px solid colors.get('neutral', 1);
        background-color: colors.get('neutral', 1);
        box-shadow: var(--handle-offset) 0 0 2px colors.get('base-100') inset, 0 0 0 2px colors.get('base-100') inset;
        [dir='rtl'] & {
            box-shadow: calc(var(--handle-offset) * 1) 0 0 2px colors.get('base-100') inset,
                0 0 0 2px colors.get('base-100') inset;
        }
    }

    &:indeterminate {
        border: 1px solid colors.get('neutral', 1);
        background-color: colors.get('neutral', 1);
        box-shadow: calc(var(--handle-offset) / 2) 0 0 2px colors.get('base-100') inset,
            calc(var(--handle-offset) / -2) 0 0 2px colors.get('base-100') inset, 0 0 0 2px colors.get('base-100') inset;
        [dir='rtl'] & {
            box-shadow: calc(var(--handle-offset) / 2) 0 0 2px colors.get('base-100') inset,
                calc(var(--handle-offset) / -2) 0 0 2px colors.get('base-100') inset,
                0 0 0 2px colors.get('base-100') inset;
        }
    }

    &:disabled {
        cursor: not-allowed;
        border-color: transparent;
        background-color: colors.get('neutral', 0.2);

        @mixin toggle-colors($prefix: '') {
            $prefix: escape($prefix);

            @each $color in list.join(colors.$brand, colors.$functional) {
                &.#{$prefix}dui-toggle-#{$color}:checked {
                    background-color: colors.get($color, 0.2);
                }
            }
        }

        @include toggle-colors();

        @each $name, $screen-size in variables.$screen-sizes {
            @media (min-width: #{$screen-size}) {
                @include toggle-colors('#{$name}:');
            }
        }
    }

    @mixin responsive-props($prefix: '') {
        $prefix: escape($prefix);

        @each $color in list.join(colors.$brand, colors.$functional) {
            &.#{$prefix}dui-toggle-#{$color} {
                &:focus-visible {
                    outline: 2px solid colors.get($color);
                }

                &:checked {
                    border-color: colors.get($color, 0.1);
                    background-color: colors.get($color);
                    color: colors.get-content($color);
                }
            }
        }

        &.#{$prefix}dui-toggle-xs {
            height: 1rem;
            width: 1.5rem;
            --handle-offset: 0.5rem;
        }

        &.#{$prefix}dui-toggle-sm {
            height: 1.25rem;
            height: 2rem;
            --handle-offset: 0.75rem;
        }

        &.#{$prefix}dui-toggle-md {
            height: 1.5rem;
            width: 3rem;
            --handle-offset: 1.5rem;
        }

        &.#{$prefix}dui-toggle-lg {
            height: 2rem;
            width: 4rem;
            --handle-offset: 2rem;
        }
    }

    @include responsive-props();

    @each $name, $screen-size in variables.$screen-sizes {
        @media (min-width: #{$screen-size}) {
            @include responsive-props('#{$name}:');
        }
    }
}
